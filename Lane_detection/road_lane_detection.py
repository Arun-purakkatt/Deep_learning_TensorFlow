# -*- coding: utf-8 -*-
"""Road_lane_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13arvVmB4vS4db_SDTYmEFvV9FRExnNcz
"""

# Commented out IPython magic to ensure Python compatibility.
#importing some useful packages
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import cv2
import os
from moviepy.editor import VideoFileClip
from IPython.display import HTML
import math
# %matplotlib inline

# Reading color image
img = cv2.imread("/content/Raw_image_road_lane.jpeg")

# Converting color image to grayscale image
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

plt.imshow(gray)
plt.show()

blur = cv2.GaussianBlur(gray, (5, 5), 0)
plt.imshow(blur,cmap='gray')
plt.title('GaussianBlur'), plt.xticks([]), plt.yticks([])
plt.show()

img_hsv = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)
lower_yellow = np.array([20, 100, 100], dtype = "uint8")
upper_yellow = np.array([30, 255, 255], dtype="uint8")

mask_yellow = cv2.inRange(img_hsv, lower_yellow, upper_yellow)
mask_white = cv2.inRange(gray, 200, 255)
mask_yw = cv2.bitwise_or(mask_white, mask_yellow)
mask_yw_image = cv2.bitwise_and(gray, mask_yw)

plt.imshow(mask_yw_image,cmap='gray')
plt.title('mask_yw_image'), plt.xticks([]), plt.yticks([])
plt.show()

edges = cv2.Canny(blur,100,200)
plt.imshow(edges,cmap='gray')
plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
plt.show()

